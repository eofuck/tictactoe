[{"/home/demiurge/Desktop/tictactoe/src/index.js":"1","/home/demiurge/Desktop/tictactoe/src/App.js":"2","/home/demiurge/Desktop/tictactoe/src/components/Game/index.js":"3","/home/demiurge/Desktop/tictactoe/src/components/Box/index.js":"4"},{"size":168,"mtime":1628348529948,"results":"5","hashOfConfig":"6"},{"size":180,"mtime":1628348967385,"results":"7","hashOfConfig":"6"},{"size":2192,"mtime":1628354101807,"results":"8","hashOfConfig":"6"},{"size":378,"mtime":1628352758183,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"yfdicp",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/home/demiurge/Desktop/tictactoe/src/index.js",[],["20","21"],"/home/demiurge/Desktop/tictactoe/src/App.js",[],"/home/demiurge/Desktop/tictactoe/src/components/Game/index.js",["22"],"import React, { useState } from 'react';\nimport './style.css';\nimport Box from '../Box';\n\nconst board = [[], [], []];\n\nfunction Game() {\n  const [turn, setTurn] = useState('X');\n  const [winningText, setWinningText] = useState('');\n\n  function changeTurn(row, col) {\n    board[row][col] = turn;\n\n    setTurn((turn) => (turn === 'X' ? 'O' : 'X'));\n\n    const winner = checkForWin();\n\n    if (!winner) {\n    } else {\n      setWinningText(winner + ` won!`);\n    }\n  }\n\n  function checkForWin() {\n    // row test\n    for (let i = 0; i < board.length; i++) {\n      const row = board[i];\n      if (row[0] === row[1] && row[1] === row[2] && row[0]) {\n        return row[0];\n      }\n    }\n\n    // column test\n    for (let i = 0; i < board.length; i++) {\n      const el1 = board[0][i];\n      const el2 = board[1][i];\n      const el3 = board[2][i];\n\n      if (el1 === el2 && el2 == el3 && el1) {\n        return el1;\n      }\n    }\n\n    // diagonal test\n\n    const d1 = board[0][0];\n    const d2 = board[1][1];\n    const d3 = board[2][2];\n\n    if (d1 === d2 && d2 === d3 && d1) {\n      return d1;\n    }\n\n    const p1 = board[0][2];\n    const p2 = board[1][1];\n    const p3 = board[2][0];\n\n    if (p1 === p2 && p2 === p3 && p1) {\n      return p1;\n    }\n    return false;\n  }\n\n  return (\n    <div id='game'>\n      <div id='winning-text'>{winningText}</div>\n      <div className='row'>\n        <Box row={0} col={0} currentState={turn} changeTurn={changeTurn} />\n        <Box row={0} col={1} currentState={turn} changeTurn={changeTurn} />\n        <Box row={0} col={2} currentState={turn} changeTurn={changeTurn} />\n      </div>\n\n      <div className='row'>\n        <Box row={1} col={0} currentState={turn} changeTurn={changeTurn} />\n        <Box row={1} col={1} currentState={turn} changeTurn={changeTurn} />\n        <Box row={1} col={2} currentState={turn} changeTurn={changeTurn} />\n      </div>\n\n      <div className='row'>\n        <Box row={2} col={0} currentState={turn} changeTurn={changeTurn} />\n        <Box row={2} col={1} currentState={turn} changeTurn={changeTurn} />\n        <Box row={2} col={2} currentState={turn} changeTurn={changeTurn} />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","/home/demiurge/Desktop/tictactoe/src/components/Box/index.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":39,"column":30,"nodeType":"29","messageId":"30","endLine":39,"endColumn":32},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]